#!/bin/bash

#############################################################################
##     ______  _                _  _______         _                 _     ##
##    (_____ \(_)              | |(_______)       | |               | |    ##
##     _____) )_  _   _  _____ | | _    _   _   _ | |__   _____   __| |    ##
##    |  ____/| |( \ / )| ___ || || |  | | | | | ||  _ \ | ___ | / _  |    ##
##    | |     | | ) X ( | ____|| || |__| | | |_| || |_) )| ____|( (_| |    ##
##    |_|     |_|(_/ \_)|_____) \_)\______)|____/ |____/ |_____) \____|    ##
##                                                                         ##
#############################################################################
###################### Credits ###################### ### Update PCI ID'S ###
## Lily (PixelQubed) for editing the scripts       ## ##                   ##
## RisingPrisum for providing the original scripts ## ##   update-pciids   ##
## Void for testing and helping out in general     ## ##                   ##
## .Chris. for testing and helping out in general  ## ## Run this command  ##
## WORMS for helping out with testing              ## ## if you dont have  ##
##################################################### ## names in you're   ##
## The VFIO community for using the scripts and    ## ## lspci feedback    ##
## testing them for us!                            ## ## in your terminal  ##
##################################################### #######################

################################# Variables #################################

## Adds current time to var for use in echo for a cleaner log and script ##
DATE=$(date +"%Y-%m-%dZ%R:%S")

## Sets dispmgr var as null ##
DISPLAY_MANAGER="null"

################################## Script ###################################

echo "---------------------------------------------------------------------"
echo "[$DATE] Beginning of Startup!"

## Get display manager on systemd based distros ##
if [[ -x /run/systemd/system ]] && echo "[$DATE] Installation has systemd."; then
  DISPLAY_MANAGER="$(grep 'ExecStart=' /etc/systemd/system/display-manager.service | awk -F'=' '{print $(NF-0)}')"
  echo "[$DATE] Display Manager = $DISPLAY_MANAGER"

  ## Stop display manager using systemd ##
  if systemctl is-active --quiet "$DISPLAY_MANAGER.service"; then
    grep -qsF "$DISPLAY_MANAGER" "/tmp/vfio-store-display-manager" || echo "$DISPLAY_MANAGER" >/tmp/vfio-store-display-manager
    systemctl stop "$DISPLAY_MANAGER.service"
    systemctl isolate multi-user.target
  fi

  while systemctl is-active --quiet "$DISPLAY_MANAGER.service"; do
    echo "[$DATE] Waiting for $DISPLAY_MANAGER to stop."
    sleep "1"
  done
fi

## Unbind EFI-Framebuffer ##
if test -e "/tmp/vfio-is-nvidia"; then
  rm -f /tmp/vfio-is-nvidia
else
  test -e "/tmp/vfio-is-amd"
  rm -f /tmp/vfio-is-amd
fi

sleep "1"

##############################################################################################################################
## Unbind VTconsoles if currently bound (adapted and modernised from https://www.kernel.org/doc/Documentation/fb/fbcon.txt) ##
##############################################################################################################################
if test -e "/tmp/vfio-bound-consoles"; then
  rm -f /tmp/vfio-bound-consoles
fi
for ((i = 0; i < 16; i++)); do
  if test -x /sys/class/vtconsole/vtcon"${i}"; then
    if [ "$(grep -c "frame buffer" /sys/class/vtconsole/vtcon"${i}"/name)" = 1 ]; then
      echo 0 >/sys/class/vtconsole/vtcon"${i}"/bind
      echo "[$DATE] Unbinding Console ${i}"
      echo "$i" >>/tmp/vfio-bound-consoles
    fi
  fi
done

sleep "1"

if lspci -nn | grep -e VGA | grep -s NVIDIA; then
  echo "[$DATE] System has an NVIDIA GPU"
  grep -qsF "true" "/tmp/vfio-is-nvidia" || echo "true" >/tmp/vfio-is-nvidia

  echo "efi-framebuffer.0" >/sys/bus/platform/drivers/efi-framebuffer/unbind
  sleep 3

  SERVICES=("nvidia-persistenced.service" "coolercontrold.service")

  for service in "${SERVICES[@]}"; do
    if systemctl is-active --quiet "$service"; then
      systemctl stop "$service"
    fi
  done

  for service in "${SERVICES[@]}"; do
    while systemctl is-active --quiet "$service"; do
      echo "[$DATE] Waiting for service to stop: $service"
      sleep "1"
    done
  done

  for i in {1..10}; do
    modprobe -r nvidia_uvm && echo "[$DATE] NVIDIA UVM Unloaded"
    modprobe -r nvidia_drm && echo "[$DATE] NVIDIA DRM Unloaded"
    modprobe -r nvidia_modeset && echo "[$DATE] NVIDIA Modeset Unloaded"
    modprobe -r nvidia && echo "[$DATE] NVIDIA Unloaded"
    modprobe -r i2c_nvidia_gpu && echo "[$DATE] NVIDIA I2C Unloaded"
    modprobe -r drm_kms_helper && echo "[$DATE] DRM KMS Helper Unloaded"
    modprobe -r drm && echo "[$DATE] DRM Unloaded"

    echo "[$DATE] Checking who is still using the NVIDIA GPU."
    lsof /dev/nvidia*
  done

  echo "[$DATE] NVIDIA GPU Drivers hopefully unloaded."
fi

if lspci -nn | grep -e VGA | grep -s AMD; then
  echo "[$DATE] System has an AMD GPU"
  grep -qsF "true" "/tmp/vfio-is-amd" || echo "true" >/tmp/vfio-is-amd
  echo efi-framebuffer.0 >/sys/bus/platform/drivers/efi-framebuffer/unbind

  ## Unload AMD GPU drivers ##
  modprobe -r drm_kms_helper
  modprobe -r amdgpu
  modprobe -r radeon
  modprobe -r drm

  echo "[$DATE] AMD GPU Drivers Unloaded"
fi

# virsh nodedev-detach pci_0000_08_00_0
# virsh nodedev-detach pci_0000_08_00_1

## Load VFIO-PCI driver ##
modprobe vfio
modprobe vfio_pci
modprobe vfio_iommu_type1

echo "[$DATE] End of Startup!"

(
  systemctl start "coolercontrold.service"
  echo "[$DATE] Cooler control service started in the background."
) &
echo "---------------------------------------------------------------------"
